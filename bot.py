import os
from dotenv import load_dotenv
import telebot
from telebot import types
from supabase_utils import save_registration_to_supabase, get_webinar_dates, fetch_registrations, get_service_account_credentials
from datetime import datetime, timedelta, timezone
from apscheduler.schedulers.background import BackgroundScheduler
import io
import requests
import pandas as pd
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload

# Load environment variables from .env file
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# Easily editable sync interval (in minutes)
SYNC_INTERVAL_MINUTES = 30
EXCEL_FILE_NAME = 'WebinarRegistrations.xlsx'

bot = telebot.TeleBot(TOKEN)

# Store user registration data temporarily
user_data = {}

# APScheduler setup
scheduler = BackgroundScheduler(timezone=timezone.utc)
scheduler.start()

def get_webinars_by_id():
    webinars = get_webinar_dates()
    return {str(w['id']): w for w in webinars}

def send_reminder(chat_id, message):
    try:
        bot.send_message(chat_id, message)
    except Exception as e:
        print(f"Failed to send message to {chat_id}: {e}")

def schedule_reminders_for_registration(reg, webinars_by_id):
    chat_id = reg.get('telegram_id')
    webinar_id = str(reg.get('webinar_id'))
    webinar = webinars_by_id.get(webinar_id)
    if not webinar or not chat_id:
        return
    # Parse webinar date as UTC-aware
    try:
        from dateutil import parser
        dt = parser.isoparse(webinar['date'])
        webinar_dt = dt.astimezone(timezone.utc)
    except Exception as e:
        print(f"Could not parse date for webinar {webinar_id}: {e}")
        return
    now = datetime.now(timezone.utc)
    reminders = []
    # Only schedule reminders that are in the future
    if webinar_dt - timedelta(days=1) > now:
        reminders.append((webinar_dt - timedelta(days=1), f"""–£–∂–µ –∑–∞–≤—Ç—Ä–∞! üöÄ

{webinar_dt.strftime('%H:%M')} –Ω–∞—á–Ω—ë—Ç—Å—è –≤–µ–±–∏–Ω–∞—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –±—ã–ª–æ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –¢—ã —É–∑–Ω–∞–µ—à—å —Å–µ–∫—Ä–µ—Ç—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏. 

–ü–æ—Å–ª–µ –≤–µ–±–∏–Ω–∞—Ä–∞ —Ç—ã —É–∂–µ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å:

‚úÖ –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—ä—ë–º–∫—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚úÖ –ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä—É—Ç—ã—Ö –∫–∞–¥—Ä–æ–≤
‚úÖ –ò –∫–∞–∫ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è

‚ö† –ó–∞–ø–∏—Å–∏ –≤–µ–±–∏–Ω–∞—Ä–∞ –Ω–µ –±—É–¥–µ—Ç ‚Äî –±—É–¥—å –æ–Ω–ª–∞–π–Ω, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å¬†–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!"""))
    if webinar_dt - timedelta(hours=1) > now:
        reminders.append((webinar_dt - timedelta(hours=1), f"""–£–∂–µ —á–µ—Ä–µ–∑ —á–∞—Å! üî•

–í–µ–±–∏–Ω–∞—Ä, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –±—ã–ª–æ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ, —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ.
–¢—ã —É–∑–Ω–∞–µ—à—å —Å–µ–∫—Ä–µ—Ç—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –æ—Ç –ø—Ä–æ—Ñ–∏ üì∏

–ü–æ—Å–ª–µ –≤–µ–±–∏–Ω–∞—Ä–∞ —Ç—ã —É–∂–µ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å:

‚úÖ –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—ä—ë–º–∫—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚úÖ –ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä—É—Ç—ã—Ö –∫–∞–¥—Ä–æ–≤
‚úÖ –ò –∫–∞–∫ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è

‚ö† –ó–∞–ø–∏—Å–∏ –≤–µ–±–∏–Ω–∞—Ä–∞ –Ω–µ –±—É–¥–µ—Ç ‚Äî –ø–æ–¥–∫–ª—é—á–∞–π—Å—è –≤–æ–≤—Ä–µ–º—è –∏ –Ω–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å!"""))
    if webinar_dt > now:
        # Debug print to check the webinar object and its link
        print(f"[DEBUG] Scheduling 'start' reminder for chat_id={chat_id}, webinar_id={webinar_id}, webinar={webinar}")
        link = webinar.get('link')
        if not link:
            link = "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É."
        reminders.append((webinar_dt, f"""–ú—ã –Ω–∞—á–∞–ª–∏! üé¨

–í–µ–±–∏–Ω–∞—Ä –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ç–æ—Å—ä—ë–º–∫–µ —É–∂–µ –∏–¥—ë—Ç!
–ó–∞—Ö–æ–¥–∏ —Å–∫–æ—Ä–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∂–∏–≤—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é.

–¢—ã —É—Å–ø–µ–µ—à—å —É–∑–Ω–∞—Ç—å:

‚úÖ –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—ä—ë–º–∫—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚úÖ –ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä—É—Ç—ã—Ö –∫–∞–¥—Ä–æ–≤
‚úÖ –ò –∫–∞–∫ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è

‚ö† –ó–∞–ø–∏—Å–∏ –Ω–µ –±—É–¥–µ—Ç ‚Äî –ø–æ–¥–∫–ª—é—á–∞–π—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
{link}"""))
    # If user registered less than 1 hour before, only send the relevant reminders
    # (i.e., if only the 'at start' reminder is in the future, only schedule that)
    for remind_time, msg in reminders:
        scheduler.add_job(send_reminder, 'date', run_date=remind_time, args=[chat_id, msg])
        print(f"Scheduled reminder for {chat_id} at {remind_time.isoformat()} : {msg}")

def schedule_all_reminders():
    registrations = fetch_registrations()
    webinars_by_id = get_webinars_by_id()
    for reg in registrations:
        schedule_reminders_for_registration(reg, webinars_by_id)

# Google Drive sync functions
def get_drive_service():
    creds = get_service_account_credentials()
    return build('drive', 'v3', credentials=creds)

def find_file_metadata(service, folder_id, file_name):
    query = f"name='{file_name}' and '{folder_id}' in parents and trashed=false"
    results = service.files().list(q=query, fields="files(id, name, mimeType)").execute()
    files = results.get('files', [])
    if not files:
        raise FileNotFoundError(f"File '{file_name}' not found in folder '{folder_id}'")
    return files[0]  # returns dict with id, name, mimeType

def download_excel_file(service, file_id, mime_type, local_path):
    if mime_type == 'application/vnd.google-apps.spreadsheet':
        # Export Google Sheet as Excel
        request = service.files().export_media(fileId=file_id, mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    else:
        # Download native Excel file
        request = service.files().get_media(fileId=file_id)
    fh = io.FileIO(local_path, 'wb')
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        status, done = downloader.next_chunk()
    fh.close()

def update_excel_sheet(local_path, registrations):
    # Load Excel file
    with pd.ExcelWriter(local_path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df = pd.DataFrame(registrations)
        df.to_excel(writer, sheet_name='Sheet1', index=False)
    # openpyxl preserves other sheets/styles

def upload_excel_file(service, file_id, local_path, mime_type):
    if mime_type == 'application/vnd.google-apps.spreadsheet':
        # Re-upload as Google Sheet (convert Excel to Google Sheet)
        media = MediaFileUpload(local_path, mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        updated = service.files().update(
            fileId=file_id,
            media_body=media,
            body={'mimeType': 'application/vnd.google-apps.spreadsheet'}
        ).execute()
    else:
        # Replace Excel file
        media = MediaFileUpload(local_path, mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        updated = service.files().update(fileId=file_id, media_body=media).execute()
    return updated

def sync_registrations_to_drive():
    """Sync registrations to Google Drive Excel file"""
    try:
        # 1. Fetch registrations from Supabase
        registrations = fetch_registrations()
        # 2. Authenticate and find file in Drive
        service = get_drive_service()
        folder_id = os.getenv('GOOGLE_DRIVE_FOLDER_ID')
        file_metadata = find_file_metadata(service, folder_id, EXCEL_FILE_NAME)
        file_id = file_metadata['id']
        mime_type = file_metadata['mimeType']
        # 3. Download the file (export if Google Sheet)
        local_path = EXCEL_FILE_NAME
        download_excel_file(service, file_id, mime_type, local_path)
        # 4. Update Sheet1
        update_excel_sheet(local_path, registrations)
        # 5. Upload back to Drive (replace original, convert if needed)
        upload_excel_file(service, file_id, local_path, mime_type)
        print(f"‚úÖ Successfully synced registrations to '{EXCEL_FILE_NAME}' in Google Drive.")
    except Exception as e:
        print(f"‚ùå Error syncing to Google Drive: {e}")

# Schedule all reminders on startup
schedule_all_reminders()

# Schedule Google Drive sync every SYNC_INTERVAL_MINUTES
scheduler.add_job(sync_registrations_to_drive, 'interval', minutes=SYNC_INTERVAL_MINUTES)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    register_btn = types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='register')
    markup.add(register_btn)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –≤–µ–±–∏–Ω–∞—Ä–æ–≤!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'register')
def handle_register(call):
    markup = types.InlineKeyboardMarkup()
    try:
        dates = get_webinar_dates()
        for date in dates:
            # Format date string for button in Russian
            try:
                # Try to parse as ISO format
                from datetime import datetime
                dt = datetime.fromisoformat(date['date'])
                # Russian month names
                months = {
                    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
                    5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
                    9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
                }
                date_str = f"{dt.day} {months[dt.month]} {dt.strftime('%H:%M')}"
            except Exception:
                date_str = str(date['date'])
            btn = types.InlineKeyboardButton(
                text=date_str,
                callback_data=f"date_{date['id']}"
            )
            markup.add(btn)
        if not dates:
            bot.send_message(call.message.chat.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ–±–∏–Ω–∞—Ä–æ–≤.")
            return
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–µ–±–∏–Ω–∞—Ä–∞:", reply_markup=markup)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç –≤–µ–±–∏–Ω–∞—Ä–æ–≤: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def handle_date_selection(call):
    chat_id = call.message.chat.id
    date_id = call.data.replace('date_', '')
    # Fetch all dates to find the selected one
    try:
        dates = get_webinar_dates()
        selected = next((d for d in dates if str(d['id']) == date_id), None)
        if not selected:
            bot.send_message(chat_id, "–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        user_data[chat_id] = {'date': selected['date'], 'date_id': selected['id'], 'link': selected.get('link')}
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
        bot.register_next_step_handler_by_chat_id(chat_id, process_full_name)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞: {e}")

def process_full_name(message):
    chat_id = message.chat.id
    user_data[chat_id]['full_name'] = message.text
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É")
    bot.register_next_step_handler_by_chat_id(chat_id, process_email)

def process_email(message):
    chat_id = message.chat.id
    user_data[chat_id]['email'] = message.text
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    bot.register_next_step_handler_by_chat_id(chat_id, process_phone)

def process_phone(message):
    chat_id = message.chat.id
    user_data[chat_id]['phone'] = message.text
    # Save to Supabase
    success = save_registration_to_supabase(user_data[chat_id], chat_id, message.from_user.username)
    if success:
        bot.send_message(chat_id, """–¢—ã –≤ —Å–ø–∏—Å–∫–µ! ‚úÖ 

–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º —Ç–µ–±–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ –∏ –ø—Ä–∏—à–ª—ë–º —Å—Å—ã–ª–∫—É –±–ª–∏–∂–µ –∫ —Å—Ç–∞—Ä—Ç—É. 

–ê –ø–æ–∫–∞ –¥–µ—Ä–∂–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é üòâ""")
        bot.send_message(chat_id, """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à –≤–µ–±–∏–Ω–∞—Ä! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å üíõ

–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ WOWMOTION üì∏
–£–∂–µ –º–Ω–æ–≥–æ –ª–µ—Ç —Å –ª—é–±–æ–≤—å—é –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–æ–º —Å–Ω–∏–º–∞–µ–º —Å–ø–æ—Ä—Ç –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ ‚Äî —Ç–∞–Ω—Ü—ã, –≥–∏–º–Ω–∞—Å—Ç–∏–∫—É, –±–æ–∫—Å –∏ –¥—Ä—É–≥–∏–µ —è—Ä–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º?
‚Äî –£–ª–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Å–æ—Ç—É, —Å–∏–ª—É –∏ —ç–º–æ—Ü–∏–∏ –≤ –∫–∞–∂–¥–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
‚Äî –°–æ–∑–¥–∞—ë–º —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–π, –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –∏ –∂–∏–≤–æ–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Äî –ü–æ–º–æ–≥–∞–µ–º —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º, —Ç—Ä–µ–Ω–µ—Ä–∞–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–∞ –¥–æ–ª–≥–∏–µ –≥–æ–¥—ã

–ù–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´—Å–Ω—è—Ç—å –∫–∞–¥—Ä¬ª, –∞ –ø–µ—Ä–µ–¥–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —ç–Ω–µ—Ä–≥–∏—é —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ.

–ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏:
‚Äî [@wowdance.kz](https://www.instagram.com/wowdance.kz/) ‚Äî –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —Ç–∞–Ω—Ü–∞
‚Äî [@wowrgym.kz](https://www.instagram.com/wowrgym.kz/) ‚Äî –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞ –≤–æ –≤—Å–µ–π –µ—ë –≥—Ä–∞—Ü–∏–∏
ü•ä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –±–æ–∫—Å—É ‚Äî —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤ –Ω–æ–≤–æ–º –ø—Ä–æ—Ñ–∏–ª–µ!

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –¥–µ–ª—É. –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–µ–±–∏–Ω–∞—Ä —Å—Ç–∞–Ω–µ—Ç –¥–ª—è –≤–∞—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π. –ê –º—ã, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –≥–æ—Ç–æ–≤—ã –¥–µ–ª–∏—Ç—å—Å—è –≤—Å–µ–º, —á—Ç–æ –∑–Ω–∞–µ–º –∏ —É–º–µ–µ–º üí´

üì≤ Insta: [@wowmotion_photo_video](https://www.instagram.com/wowmotion_photo_video/)""",parse_mode='Markdown')
        # Optionally, send the webinar link if available
        link = user_data[chat_id].get('link')
        if link:
            # Format the selected date in Russian
            try:
                from datetime import datetime
                dt = datetime.fromisoformat(user_data[chat_id]['date'])
                # Russian month names
                months = {
                    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
                    5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
                    9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
                }
                formatted_date = f"{dt.day} {months[dt.month]} {dt.strftime('%H:%M')}"
            except Exception:
                formatted_date = user_data[chat_id]['date']
            
            bot.send_message(chat_id, f"""üé• –í–µ–±–∏–Ω–∞—Ä "–°–µ–∫—Ä–µ—Ç—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Å—ä—ë–º–∫–∏"
üìÖ –î–∞—Ç–∞: {formatted_date}
üìç –§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω
üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: [@wowmotion_photo_video](https://www.instagram.com/wowmotion_photo_video/)

üîì –ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:
‚Äî –ö–∞–∫ –∫—Ä–∞—Å–∏–≤–æ —Å–Ω–∏–º–∞—Ç—å —Å–ø–æ—Ä—Ç –≤ –¥–≤–∏–∂–µ–Ω–∏–∏
‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
‚Äî –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç—É—Ä–Ω–∏—Ä—É: —Ç–µ—Ö–Ω–∏–∫–∞, –∫–æ–º–∞–Ω–¥–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚Äî –ö–∞–∫ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∏–ª—É, —ç–º–æ—Ü–∏–∏ –∏ –¥–∏–Ω–∞–º–∏–∫—É –∫–∞–¥—Ä–∞
‚Äî –û—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å
‚Äî –°–æ–≤–µ—Ç—ã –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ç–æ
‚Äî –ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Å—ä—ë–º–∫–µ

üéÅ –í –∫–æ–Ω—Ü–µ –≤–µ–±–∏–Ω–∞—Ä–∞ ‚Äî –ø–æ–¥–∞—Ä–æ–∫ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
{link}""",parse_mode='Markdown')
        # Schedule reminders for this registration
        webinars_by_id = get_webinars_by_id()
        reg = {
            'telegram_id': chat_id,
            'webinar_id': user_data[chat_id]['date_id']
        }
        schedule_reminders_for_registration(reg, webinars_by_id)
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# TESTING: Command to manually schedule reminders for all registrations (for testing with new webinar dates)
@bot.message_handler(commands=['test_reminders'])
def test_reminders(message):
    schedule_all_reminders()
    bot.send_message(message.chat.id, "Test: All reminders have been (re)scheduled based on current data.")

# TESTING: Command to manually trigger Google Drive sync
@bot.message_handler(commands=['test_sync'])
def test_sync(message):
    bot.send_message(message.chat.id, "üîÑ Starting manual Google Drive sync...")
    sync_registrations_to_drive()
    bot.send_message(message.chat.id, "‚úÖ Manual sync completed!")

if __name__ == "__main__":
    print("Bot is polling...")
    print(f"Google Drive sync scheduled every {SYNC_INTERVAL_MINUTES} minutes")
    bot.polling(none_stop=True) 