import os
from dotenv import load_dotenv
import telebot
from telebot import types
from supabase_utils import save_registration_to_supabase, get_webinar_dates, fetch_registrations, get_service_account_credentials, save_course_registration_to_supabase, update_course_payment_status, get_course_registration_by_id, get_latest_course_registration_by_telegram_id, fetch_course_registrations
from datetime import datetime, timedelta, timezone
from apscheduler.schedulers.background import BackgroundScheduler
import io
import requests
import pandas as pd
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload
import re

# Load environment variables from .env file
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# Easily editable sync interval (in minutes)
SYNC_INTERVAL_MINUTES = 30
EXCEL_FILE_NAME = 'WebinarRegistrations.xlsx'

# Circle video file_id (will be set after upload)
CIRCLE_VIDEO_FILE_ID = os.getenv('CIRCLE_VIDEO_FILE_ID', '')
CIRCLE_VIDEO_FILE_ID2 = os.getenv('CIRCLE_VIDEO_FILE_ID2', '')

bot = telebot.TeleBot(TOKEN)

# Store user registration data temporarily
user_data = {}

# Input validation functions
def validate_phone_number(phone):
    """
    Validate Kazakhstan phone number format.
    Accepts: +7 707 123 45 67, 87071234567, 8 (707) 123-45-67, +77071234567
    """
    # Remove all non-digit characters except +
    cleaned = re.sub(r'[^\d+]', '', phone)
    
    # Check for valid Kazakhstan mobile number patterns
    patterns = [
        r'^\+77\d{9}$',  # +77071234567
        r'^87\d{9}$',    # 87071234567
    ]
    
    for pattern in patterns:
        if re.match(pattern, cleaned):
            return True
    
    return False

def validate_email(email):
    """
    Validate email format using regex.
    """
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def format_phone_number(phone):
    """
    Format phone number to standard Kazakhstan format: +7 7XX XXX XX XX
    """
    # Remove all non-digit characters
    cleaned = re.sub(r'[^\d]', '', phone)
    
    # If it starts with 8, replace with +7
    if cleaned.startswith('8'):
        cleaned = '7' + cleaned[1:]
    
    # If it doesn't start with 7, add +7
    if not cleaned.startswith('7'):
        cleaned = '7' + cleaned
    
    # Format as +7 7XX XXX XX XX
    if len(cleaned) == 11 and cleaned.startswith('7'):
        return f"+7 {cleaned[1:4]} {cleaned[4:7]} {cleaned[7:9]} {cleaned[9:11]}"
    
    return phone  # Return original if can't format

# APScheduler setup
scheduler = BackgroundScheduler(timezone=timezone.utc)
scheduler.start()

def get_webinars_by_id():
    webinars = get_webinar_dates()
    return {str(w['id']): w for w in webinars}

def send_reminder(chat_id, message):
    try:
        bot.send_message(chat_id, message)
    except Exception as e:
        print(f"Failed to send message to {chat_id}: {e}")

def schedule_reminders_for_registration(reg, webinars_by_id):
    chat_id = reg.get('telegram_id')
    # Only use numeric chat_ids
    try:
        chat_id_int = int(chat_id)
    except (TypeError, ValueError):
        print(f"[WARNING] Skipping reminder: chat_id is not numeric: {chat_id}")
        return
    webinar_id = str(reg.get('webinar_id'))
    webinar = webinars_by_id.get(webinar_id)
    if not webinar or not chat_id_int:
        return
    # Parse webinar date as UTC-aware
    try:
        from dateutil import parser
        import pytz
        #dt = parser.isoparse(webinar['date'])
        #webinar_dt = dt.astimezone(timezone.utc)
        local_tz = pytz.timezone('Asia/Almaty')  # Replace with your desired timezone
        dt = parser.isoparse(webinar['date'])
        # Localize if it's a naive datetime (no tzinfo)
        if dt.tzinfo is None:
            dt = local_tz.localize(dt)
            
        # Convert to UTC for proper scheduling
        webinar_dt = dt.astimezone(timezone.utc)
        print(f"[DEBUG] Webinar local time (Asia/Almaty): {dt}")
        print(f"[DEBUG] Converted UTC time for scheduling: {webinar_dt}")
    except Exception as e:
        print(f"Could not parse date for webinar {webinar_id}: {e}")
        return
    now = datetime.now(timezone.utc)
    reminders = []
    # Only schedule reminders that are in the future
    if webinar_dt - timedelta(days=1) > now:
        reminders.append((webinar_dt - timedelta(days=1), f"""–£–∂–µ –∑–∞–≤—Ç—Ä–∞! üöÄ

{webinar_dt.strftime('%H:%M')} –Ω–∞—á–Ω—ë—Ç—Å—è –≤–µ–±–∏–Ω–∞—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –±—ã–ª–æ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –¢—ã —É–∑–Ω–∞–µ—à—å —Å–µ–∫—Ä–µ—Ç—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏. 

–ü–æ—Å–ª–µ –≤–µ–±–∏–Ω–∞—Ä–∞ —Ç—ã —É–∂–µ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å:

‚úÖ –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—ä—ë–º–∫—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚úÖ –ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä—É—Ç—ã—Ö –∫–∞–¥—Ä–æ–≤
‚úÖ –ò –∫–∞–∫ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è

‚ö† –ó–∞–ø–∏—Å–∏ –≤–µ–±–∏–Ω–∞—Ä–∞ –Ω–µ –±—É–¥–µ—Ç ‚Äî –±—É–¥—å –æ–Ω–ª–∞–π–Ω, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å¬†–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!"""))
    if webinar_dt - timedelta(hours=1) > now:
        reminders.append((webinar_dt - timedelta(hours=1), f"""–£–∂–µ —á–µ—Ä–µ–∑ —á–∞—Å! üî•

–í–µ–±–∏–Ω–∞—Ä, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –±—ã–ª–æ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ, —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ.
–¢—ã —É–∑–Ω–∞–µ—à—å —Å–µ–∫—Ä–µ—Ç—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –æ—Ç –ø—Ä–æ—Ñ–∏ üì∏

–ü–æ—Å–ª–µ –≤–µ–±–∏–Ω–∞—Ä–∞ —Ç—ã —É–∂–µ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å:

‚úÖ –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—ä—ë–º–∫—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚úÖ –ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä—É—Ç—ã—Ö –∫–∞–¥—Ä–æ–≤
‚úÖ –ò –∫–∞–∫ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è

‚ö† –ó–∞–ø–∏—Å–∏ –≤–µ–±–∏–Ω–∞—Ä–∞ –Ω–µ –±—É–¥–µ—Ç ‚Äî –ø–æ–¥–∫–ª—é—á–∞–π—Å—è –≤–æ–≤—Ä–µ–º—è –∏ –Ω–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å!"""))
    if webinar_dt > now:
        # Debug print to check the webinar object and its link
        print(f"[DEBUG] Scheduling 'start' reminder for chat_id={chat_id}, webinar_id={webinar_id}, webinar={webinar}")
        link = webinar.get('link')
        if not link:
            link = "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É."
        reminders.append((webinar_dt, f"""–ú—ã –Ω–∞—á–∞–ª–∏! üé¨

–í–µ–±–∏–Ω–∞—Ä –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ç–æ—Å—ä—ë–º–∫–µ —É–∂–µ –∏–¥—ë—Ç!
–ó–∞—Ö–æ–¥–∏ —Å–∫–æ—Ä–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∂–∏–≤—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é.

–¢—ã —É—Å–ø–µ–µ—à—å —É–∑–Ω–∞—Ç—å:

‚úÖ –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—ä—ë–º–∫—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚úÖ –ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä—É—Ç—ã—Ö –∫–∞–¥—Ä–æ–≤
‚úÖ –ò –∫–∞–∫ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è

‚ö† –ó–∞–ø–∏—Å–∏ –Ω–µ –±—É–¥–µ—Ç ‚Äî –ø–æ–¥–∫–ª—é—á–∞–π—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
{link}"""))
    # If user registered less than 1 hour before, only send the relevant reminders
    # (i.e., if only the 'at start' reminder is in the future, only schedule that)
    for remind_time, msg in reminders:
        scheduler.add_job(send_reminder, 'date', run_date=remind_time, args=[chat_id_int, msg])
        print(f"Scheduled reminder for {chat_id_int} at {remind_time.isoformat()} : {msg}")

def schedule_all_reminders():
    registrations = fetch_registrations()
    webinars_by_id = get_webinars_by_id()
    for reg in registrations:
        schedule_reminders_for_registration(reg, webinars_by_id)

# Google Drive sync functions
def get_drive_service():
    creds = get_service_account_credentials()
    return build('drive', 'v3', credentials=creds)

def find_file_metadata(service, folder_id, file_name):
    query = f"name='{file_name}' and '{folder_id}' in parents and trashed=false"
    results = service.files().list(q=query, fields="files(id, name, mimeType)").execute()
    files = results.get('files', [])
    if not files:
        raise FileNotFoundError(f"File '{file_name}' not found in folder '{folder_id}'")
    return files[0]  # returns dict with id, name, mimeType

def download_excel_file(service, file_id, mime_type, local_path):
    if mime_type == 'application/vnd.google-apps.spreadsheet':
        # Export Google Sheet as Excel
        request = service.files().export_media(fileId=file_id, mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    else:
        # Download native Excel file
        request = service.files().get_media(fileId=file_id)
    fh = io.FileIO(local_path, 'wb')
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        status, done = downloader.next_chunk()
    fh.close()

def update_excel_sheet(local_path, registrations):
    # Load Excel file
    with pd.ExcelWriter(local_path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df = pd.DataFrame(registrations)
        df.to_excel(writer, sheet_name='Sheet1', index=False)
    # openpyxl preserves other sheets/styles

def upload_excel_file(service, file_id, local_path, mime_type):
    if mime_type == 'application/vnd.google-apps.spreadsheet':
        # Re-upload as Google Sheet (convert Excel to Google Sheet)
        media = MediaFileUpload(local_path, mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        updated = service.files().update(
            fileId=file_id,
            media_body=media,
            body={'mimeType': 'application/vnd.google-apps.spreadsheet'}
        ).execute()
    else:
        # Replace Excel file
        media = MediaFileUpload(local_path, mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        updated = service.files().update(fileId=file_id, media_body=media).execute()
    return updated

def sync_course_registrations_to_drive():
    """Sync course registrations to Google Drive Excel file"""
    try:
        # 1. Fetch course registrations from Supabase
        course_registrations = fetch_course_registrations()
        # 2. Authenticate and find file in Drive
        service = get_drive_service()
        folder_id = os.getenv('GOOGLE_DRIVE_FOLDER_ID')
        
        try:
            file_metadata = find_file_metadata(service, folder_id, 'CoursesRegistrations.xlsx')
            file_id = file_metadata['id']
            mime_type = file_metadata['mimeType']
            # 3. Download the file (export if Google Sheet)
            local_path = 'CoursesRegistrations.xlsx'
            download_excel_file(service, file_id, mime_type, local_path)
        except FileNotFoundError:
            print("üìù Creating new CoursesRegistrations.xlsx file in Google Drive...")
            # Create a new Excel file with course registrations data
            df = pd.DataFrame(course_registrations)
            df.to_excel('CoursesRegistrations.xlsx', index=False)
            
            # Upload the new file to Google Drive
            file_metadata = {
                'name': 'CoursesRegistrations.xlsx',
                'parents': [folder_id]
            }
            media = MediaFileUpload('CoursesRegistrations.xlsx', mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            file = service.files().create(body=file_metadata, media_body=media, fields='id').execute()
            file_id = file.get('id')
            print(f"‚úÖ Created new file with ID: {file_id}")
            return
        
        # 4. Update Sheet1
        update_excel_sheet(local_path, course_registrations)
        # 5. Upload back to Drive (replace original, convert if needed)
        upload_excel_file(service, file_id, local_path, mime_type)
        print(f"‚úÖ Successfully synced course registrations to 'CoursesRegistrations.xlsx' in Google Drive.")
    except Exception as e:
        print(f"‚ùå Error syncing course registrations to Google Drive: {e}")

def sync_registrations_to_drive():
    """Sync webinar registrations to Google Drive Excel file"""
    try:
        # 1. Fetch registrations from Supabase
        registrations = fetch_registrations()
        # 2. Authenticate and find file in Drive
        service = get_drive_service()
        folder_id = os.getenv('GOOGLE_DRIVE_FOLDER_ID')
        file_metadata = find_file_metadata(service, folder_id, EXCEL_FILE_NAME)
        file_id = file_metadata['id']
        mime_type = file_metadata['mimeType']
        # 3. Download the file (export if Google Sheet)
        local_path = EXCEL_FILE_NAME
        download_excel_file(service, file_id, mime_type, local_path)
        # 4. Update Sheet1
        update_excel_sheet(local_path, registrations)
        # 5. Upload back to Drive (replace original, convert if needed)
        upload_excel_file(service, file_id, local_path, mime_type)
        print(f"‚úÖ Successfully synced registrations to '{EXCEL_FILE_NAME}' in Google Drive.")
    except Exception as e:
        print(f"‚ùå Error syncing to Google Drive: {e}")

def sync_all_to_drive():
    """Sync both webinar and course registrations to Google Drive"""
    print("üîÑ Starting sync of all registrations to Google Drive...")
    sync_registrations_to_drive()
    sync_course_registrations_to_drive()
    print("‚úÖ All sync operations completed.")

# Schedule all reminders on startup
try:
    schedule_all_reminders()
    print("‚úÖ Successfully scheduled all reminders on startup")
except Exception as e:
    print(f"‚ö†Ô∏è Warning: Could not schedule reminders on startup: {e}")
    print("Bot will continue running, but reminders may not be scheduled until next restart")

# Schedule Google Drive sync every SYNC_INTERVAL_MINUTES
scheduler.add_job(sync_all_to_drive, 'interval', minutes=SYNC_INTERVAL_MINUTES)

@bot.message_handler(commands=['upload_circle'])
def upload_circle_video(message):
    """Admin command to upload circle video and get file_id"""
    # Check if user is admin (you can customize this check)
    admin_chat_id = os.getenv('ADMIN_CHAT_ID')
    if not admin_chat_id or str(message.chat.id) != admin_chat_id:
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        # Send the video from local file
        with open('media/intro_circle.mp4', 'rb') as video_file:
            sent_video = bot.send_video_note(message.chat.id, video_file)
            
        # Get and display the file_id
        file_id = sent_video.video_note.file_id
        bot.reply_to(message, f"‚úÖ –ö—Ä—É–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\nüìã File ID –¥–ª—è .env:\nCIRCLE_VIDEO_FILE_ID={file_id}\n\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è CIRCLE_VIDEO_FILE_ID")
        
    except FileNotFoundError:
        bot.reply_to(message, "‚ùå –§–∞–π–ª media/intro_circle.mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ media/")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # Send circle video if file_id is available
    
    
    markup = types.InlineKeyboardMarkup()
    webinar_btn = types.InlineKeyboardButton('üìÖ –í–µ–±–∏–Ω–∞—Ä', callback_data='webinar_main')
    course_btn = types.InlineKeyboardButton('üì∏ –û–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å', callback_data='course_main')
    markup.add(webinar_btn, course_btn)
    
    welcome_text = """–ü—Ä–∏–≤–µ—Ç! üëã  
–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ Wowmotion. –ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∏—à—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±–∏–Ω–∞—Ä–µ –∏ –æ–±—É—á–∞—é—â–µ–º –∫—É—Ä—Å–µ.

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"""
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'webinar_main')
def handle_webinar_main(call):

    if CIRCLE_VIDEO_FILE_ID2:
        try:
            bot.send_video_note(call.message.chat.id, CIRCLE_VIDEO_FILE_ID2)
        except Exception as e:
            print(f"Error sending circle video: {e}")
            # Continue with normal flow even if video fails
    
    # Small delay to let video load
    import time
    time.sleep(1)

    markup = types.InlineKeyboardMarkup()
    register_btn = types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='register')
    markup.add(register_btn)
    bot.send_message(call.message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –≤–µ–±–∏–Ω–∞—Ä–æ–≤!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'course_main')
def handle_course_main(call):

    if CIRCLE_VIDEO_FILE_ID:
        try:
            bot.send_video_note(call.message.chat.id, CIRCLE_VIDEO_FILE_ID)
        except Exception as e:
            print(f"Error sending circle video: {e}")
            # Continue with normal flow even if video fails
    
    # Small delay to let video load
    import time
    time.sleep(1)

    markup = types.InlineKeyboardMarkup()
    how_btn = types.InlineKeyboardButton('üìñ –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–±—É—á–µ–Ω–∏–µ', callback_data='course_how')
    program_btn = types.InlineKeyboardButton('üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞', callback_data='course_program')
    payment_btn = types.InlineKeyboardButton('üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–ø–ª–∞—Ç–∞', callback_data='course_payment')
    faq_btn = types.InlineKeyboardButton('‚ùì –í–æ–ø—Ä–æ—Å‚Äì–æ—Ç–≤–µ—Ç', callback_data='course_faq')
    markup.add(how_btn, program_btn, payment_btn, faq_btn)
    
    course_text = """üë®‚Äçüè´ –≠—Ç–æ –æ–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å –Ω–∞ 5 –Ω–µ–¥–µ–ª—å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –æ—Å–≤–æ–∏—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Å—ä—ë–º–∫—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.
–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ—Ç, –Ω–æ —Ö–æ—á–µ—Ç –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."""
    
    bot.send_message(call.message.chat.id, course_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'course_how')
def handle_course_how(call):
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='course_main')
    markup.add(back_btn)
    
    how_text = """üìÜ –û–±—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç—Å—è 4 –Ω–µ–¥–µ–ª–∏ + 1 –Ω–µ–¥–µ–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∞  
üß† –§–æ—Ä–º–∞—Ç: –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ + —Ä–∞–∑–±–æ—Ä—ã + –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è  
üìç –í—Å—ë –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–Ω–ª–∞–π–Ω, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    
    bot.send_message(call.message.chat.id, how_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'course_program')
def handle_course_program(call):
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='course_main')
    markup.add(back_btn)
    
    program_text = """üìö –ü–†–û–ì–†–ê–ú–ú–ê –ö–£–†–°–ê

üîπ –ë–ª–æ–∫ 1: –í–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é

üé¨ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞

‚Äî –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Å—ä—ë–º–∫–∞ –∏ –≤ —á—ë–º –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
‚Äî –ö—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –≥–¥–µ –æ–Ω–∏ –Ω—É–∂–Ω—ã
‚Äî –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
‚Äî –ü–æ—á–µ–º—É —ç—Ç–æ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–æ –∏ –∫–∞–∫ –Ω–∞—á–∞—Ç—å –¥–∞–∂–µ –±–µ–∑ –æ–ø—ã—Ç–∞

‚∏ª

üîπ –ë–ª–æ–∫ 2: –û—Å–Ω–æ–≤—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

üì∏ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞, –±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ –æ–±–æ–π—Ç–∏—Å—å

‚Äî –ö–∞–º–µ—Ä–∞, –æ–±—ä–µ–∫—Ç–∏–≤—ã, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
‚Äî –í—ã–¥–µ—Ä–∂–∫–∞, –¥–∏–∞—Ñ—Ä–∞–≥–º–∞, ISO, —Ñ–æ–∫—É—Å
‚Äî –°–≤–µ—Ç, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ —Ü–≤–µ—Ç
‚Äî –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å—ä—ë–º–∫–µ

‚∏ª

üîπ –ë–ª–æ–∫ 3: –°—ä—ë–º–∫–∞ —Å–ø–æ—Ä—Ç–∞ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ

üéØ –í—Å—ë –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–π–º–∞—Ç—å –º–æ–º–µ–Ω—Ç –∏ —Å–Ω—è—Ç—å –¥–∏–Ω–∞–º–∏–∫—É

‚Äî –ö–∞–∫ —Å–Ω–∏–º–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ (–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞, —Ç–∞–Ω—Ü—ã, –±–æ–∫—Å –∏ –¥—Ä.)
‚Äî –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É —Å—ä—ë–º–∫–∏ –∏ –Ω–µ –º–µ—à–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—é
‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –≤ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
‚Äî –°–µ–∫—Ä–µ—Ç—ã ¬´–∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–¥—Ä–∞¬ª –≤ –¥–≤–∏–∂–µ–Ω–∏–∏

‚∏ª

üîπ –ë–ª–æ–∫ 4: –†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å—ä—ë–º–æ–∫

ü§ù –ö–∞–∫ —Å—Ç–∞—Ç—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º

‚Äî –ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏: —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã, —Ä–æ–¥–∏—Ç–µ–ª–∏, —Ç—Ä–µ–Ω–µ—Ä—ã
‚Äî –ö–∞–∫ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å—ä—ë–º–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
‚Äî –ö–∞–∫ –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ñ–æ—Ç–æ
‚Äî –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å

‚∏ª

üîπ –ë–ª–æ–∫ 5: –ü—Ä–∞–∫—Ç–∏–∫–∞, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ —Ä–æ—Å—Ç

üöÄ –°—Ç–∞—Ä—Ç —Ç–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä—ã

‚Äî –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—ä—ë–º–∫–∞ —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º
‚Äî –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
‚Äî –ö–∞–∫ —Å–æ–±—Ä–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
‚Äî –ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É WOWMOTION
‚Äî –ò–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
‚∏ª
"""
    
    bot.send_message(call.message.chat.id, program_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'course_payment')
def handle_course_payment(call):
    markup = types.InlineKeyboardMarkup()
    pay_btn = types.InlineKeyboardButton('üîê –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å', callback_data='course_pay')
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='course_main')
    markup.add(pay_btn, back_btn)
    
    payment_text = """üí∞ –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: 150,000‚Ç∏  
üéÅ –ë–æ–Ω—É—Å: —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞  
üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞ Kaspi / –ø–µ—Ä–µ–≤–æ–¥–æ–º  
üìç –ú–µ—Å—Ç–æ –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –Ω–∞–º –≤ Instagram –∏–ª–∏ WhatsApp:
üì∏ @wowmotion_photo_video
üìû [–Ω–æ–º–µ—Ä WhatsApp]
–ú—ã –Ω–∞ —Å–≤—è–∑–∏ –∏ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!"""
    
    bot.send_message(call.message.chat.id, payment_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'course_pay')
def handle_course_pay(call):
    chat_id = call.message.chat.id
    user_data[chat_id] = {'type': 'course'}
    bot.send_message(chat_id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∫—É—Ä—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    bot.register_next_step_handler_by_chat_id(chat_id, process_course_full_name)

@bot.callback_query_handler(func=lambda call: call.data == 'course_faq')
def handle_course_faq(call):
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='course_main')
    markup.add(back_btn)
    
    faq_text = """‚ùì –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´

üü¢ –Ø –Ω–æ–≤–∏—á–æ–∫. –ú–Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç –∫—É—Ä—Å?
‚Äî –î–∞! –ö—É—Ä—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.

üü¢ –£ –º–µ–Ω—è –Ω–µ—Ç –∫—Ä—É—Ç–æ–π –∫–∞–º–µ—Ä—ã.
‚Äî –ü–æ–¥–æ–π–¥—ë—Ç –ª—é–±–∞—è –∫–∞–º–µ—Ä–∞ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –Ω–∞—á–∞—Ç—å! –ú—ã –ø–æ–¥—Å–∫–∞–∂–µ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å.

üü¢ –ë—É–¥–µ—Ç –ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?
‚Äî –î–∞, –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π –∏ –ø—Ä–∞–∫—Ç–∏–∫–µ ‚Äî —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∏–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.

üü¢ –Ø –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–µ–±–∏–Ω–∞—Ä. –ë—É–¥–µ—Ç –∑–∞–ø–∏—Å—å?
‚Äî –î–∞, –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–µ–±–∏–Ω–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø–∏—Å—å."""
    
    bot.send_message(call.message.chat.id, faq_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'register')
def handle_register(call):
    markup = types.InlineKeyboardMarkup()
    try:
        dates = get_webinar_dates()
        for date in dates:
            # Format date string for button in Russian
            try:
                # Try to parse as ISO format
                from datetime import datetime
                dt = datetime.fromisoformat(date['date'])
                # Russian month names
                months = {
                    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
                    5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
                    9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
                }
                date_str = f"{dt.day} {months[dt.month]} {dt.strftime('%H:%M')}"
            except Exception:
                date_str = str(date['date'])
            btn = types.InlineKeyboardButton(
                text=date_str,
                callback_data=f"date_{date['id']}"
            )
            markup.add(btn)
        if not dates:
            bot.send_message(call.message.chat.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ–±–∏–Ω–∞—Ä–æ–≤.")
            return
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–µ–±–∏–Ω–∞—Ä–∞:", reply_markup=markup)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç –≤–µ–±–∏–Ω–∞—Ä–æ–≤: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def handle_date_selection(call):
    chat_id = call.message.chat.id
    date_id = call.data.replace('date_', '')
    # Fetch all dates to find the selected one
    try:
        dates = get_webinar_dates()
        selected = next((d for d in dates if str(d['id']) == date_id), None)
        if not selected:
            bot.send_message(chat_id, "–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        user_data[chat_id] = {'date': selected['date'], 'date_id': selected['id'], 'link': selected.get('link')}
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
        bot.register_next_step_handler_by_chat_id(chat_id, process_full_name)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞: {e}")

def process_course_full_name(message):
    chat_id = message.chat.id
    user_data[chat_id]['full_name'] = message.text
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler_by_chat_id(chat_id, process_course_phone)

def process_course_phone(message):
    chat_id = message.chat.id
    phone = message.text.strip()
    
    # Validate phone number
    if not validate_phone_number(phone):
        bot.send_message(chat_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +77011234567)")
        bot.register_next_step_handler_by_chat_id(chat_id, process_course_phone)
        return
    
    # Format phone number to standard format
    formatted_phone = format_phone_number(phone)
    user_data[chat_id]['phone'] = formatted_phone
    user_data[chat_id]['telegram_username'] = message.from_user.username
    
    # Save course registration to Supabase
    success = save_course_registration_to_supabase(user_data[chat_id], chat_id, message.from_user.username)
    
    if success:
        # Fetch the registration ID from the database
        registration = get_latest_course_registration_by_telegram_id(chat_id)
        
        if registration and registration.get('id'):
            registration_id = registration['id']
            user_data[chat_id]['registration_id'] = registration_id
            print(f"Retrieved registration ID from database: {registration_id}")
        else:
            print("Warning: Could not retrieve registration ID from database")
            user_data[chat_id]['registration_id'] = None
        
        bot.send_message(chat_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫—É—Ä—Å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # Send payment instructions
        payment_instructions = """üí≥ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –û–ü–õ–ê–¢–ï

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: 150,000‚Ç∏

üì± –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Kaspi:
‚Ä¢ –°—Å—ã–ª–∫–∞: https://pay.kaspi.kz/pay/s6llvgtb
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: [WowMotion]
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ö—É—Ä—Å —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Å—ä—ë–º–∫–∏


üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        
        bot.send_message(chat_id, payment_instructions)
        bot.send_message(chat_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ:")
        bot.register_next_step_handler_by_chat_id(chat_id, process_payment_receipt)
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

def process_payment_receipt(message):
    chat_id = message.chat.id
    if message.photo:
        # Get the largest photo size
        photo = message.photo[-1]
        file_id = photo.file_id
        
        try:
            # Download the photo
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            # Send confirmation to user
            bot.send_message(chat_id, """‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —á–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
            –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –Ω–∞–º –≤ Instagram –∏–ª–∏ WhatsApp:
            üì∏ @wowmotion_photo_video
            üìû [+7 (706) 651-22-93, +7 (705) 705-82-75]
            –ú—ã –Ω–∞ —Å–≤—è–∑–∏ –∏ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!""")
            
            # Notify admin about new course registration with photo
            admin_chat_id = os.getenv('ADMIN_CHAT_ID')  # Add this to your .env
            if admin_chat_id:
                try:
                    admin_chat_id_int = int(admin_chat_id)
                    registration_id = user_data[chat_id].get('registration_id')
                    
                    # Create inline keyboard with confirmation button (only if we have a real ID)
                    markup = None
                    if registration_id:
                        markup = types.InlineKeyboardMarkup()
                        confirm_btn = types.InlineKeyboardButton(
                            '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', 
                            callback_data=f'confirm_{registration_id}'
                        )
                        markup.add(confirm_btn)
                    
                    # Send registration details
                    registration_text = f"""üéì –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫—É—Ä—Å!

üë§ –ò–º—è: {user_data[chat_id]['full_name']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[chat_id]['phone']}
üÜî Username: @{user_data[chat_id]['telegram_username']}
üìö –ü–ª–∞–Ω: –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –§–æ—Ç–æ–≥—Ä–∞—Ñ (5 –Ω–µ–¥–µ–ª—å)
üí∞ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
                    
                    if registration_id:
                        registration_text += f"\nüÜî ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_id}"
                    else:
                        registration_text += "\n‚ö†Ô∏è ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"
                    
                    # Send the payment receipt photo with confirmation button
                    bot.send_photo(
                        admin_chat_id_int, 
                        downloaded_file, 
                        caption=registration_text,
                        reply_markup=markup
                    )
                    
                except Exception as e:
                    print(f"Error sending to admin: {e}")
            else:
                print("ADMIN_CHAT_ID not set in environment variables")
                
        except Exception as e:
            print(f"Error processing payment receipt: {e}")
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_'))
def handle_payment_confirmation(call):
    """Handle payment confirmation from admin"""
    try:
        # Extract registration ID from callback data
        registration_id = call.data.replace('confirm_', '')
        
        # Update payment status in Supabase
        success = update_course_payment_status(registration_id)
        
        if success:
            # Get registration details to notify the user
            registration = get_course_registration_by_id(registration_id)
            
            # Notify admin
            bot.answer_callback_query(call.id, "‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            
            # Update the message to show it's confirmed
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=call.message.caption + "\n\n‚úÖ –ü–õ–ê–¢–Å–ñ –ü–û–î–¢–í–ï–†–ñ–î–Å–ù",
                reply_markup=None  # Remove the button
            )
            
            # Notify the original user
            if registration and registration.get('telegram_id'):
                try:
                    user_chat_id = int(registration['telegram_id'])
                    bot.send_message(
                        user_chat_id, 
                        "üéâ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                    )
                except Exception as e:
                    print(f"Error notifying user: {e}")
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            
    except Exception as e:
        print(f"Error in payment confirmation: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

def process_full_name(message):
    chat_id = message.chat.id
    user_data[chat_id]['full_name'] = message.text
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É")
    bot.register_next_step_handler_by_chat_id(chat_id, process_email)

def process_email(message):
    chat_id = message.chat.id
    email = message.text.strip()
    
    # Validate email
    if not validate_email(email):
        bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        bot.register_next_step_handler_by_chat_id(chat_id, process_email)
        return
    
    user_data[chat_id]['email'] = email
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    bot.register_next_step_handler_by_chat_id(chat_id, process_phone)

def process_phone(message):
    chat_id = message.chat.id
    phone = message.text.strip()
    
    # Validate phone number
    if not validate_phone_number(phone):
        bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 7XX XXX XX XX.")
        bot.register_next_step_handler_by_chat_id(chat_id, process_phone)
        return
    
    # Format phone number to standard format
    formatted_phone = format_phone_number(phone)
    user_data[chat_id]['phone'] = formatted_phone
    
    # Save to Supabase
    success = save_registration_to_supabase(user_data[chat_id], chat_id, message.from_user.username)
    if success:
        bot.send_message(chat_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–µ–±–∏–Ω–∞—Ä–æ–º.")
        # Optionally, send the webinar link if available
        link = user_data[chat_id].get('link')
        if link:
            # Format the selected date in Russian
            try:
                from datetime import datetime
                dt = datetime.fromisoformat(user_data[chat_id]['date'])
                # Russian month names
                months = {
                    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
                    5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
                    9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
                }
                formatted_date = f"{dt.day} {months[dt.month]} {dt.strftime('%H:%M')}"
            except Exception:
                formatted_date = user_data[chat_id]['date']
            
            bot.send_message(chat_id, f"""üé• –í–µ–±–∏–Ω–∞—Ä "–°–µ–∫—Ä–µ—Ç—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Å—ä—ë–º–∫–∏"
üìÖ –î–∞—Ç–∞: {formatted_date}
üìç –§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω
üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @wowmotion_photo_video

üîì –ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:
‚Äî –ö–∞–∫ –∫—Ä–∞—Å–∏–≤–æ —Å–Ω–∏–º–∞—Ç—å —Å–ø–æ—Ä—Ç –≤ –¥–≤–∏–∂–µ–Ω–∏–∏
‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
‚Äî –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç—É—Ä–Ω–∏—Ä—É: —Ç–µ—Ö–Ω–∏–∫–∞, –∫–æ–º–∞–Ω–¥–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚Äî –ö–∞–∫ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∏–ª—É, —ç–º–æ—Ü–∏–∏ –∏ –¥–∏–Ω–∞–º–∏–∫—É –∫–∞–¥—Ä–∞
‚Äî –û—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å
‚Äî –°–æ–≤–µ—Ç—ã –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ç–æ
‚Äî –ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Å—ä—ë–º–∫–µ

üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω—Å—ã, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–ø–∏—Å—å –≤–µ–±–∏–Ω–∞—Ä–∞: https://t.me/wowdancechannel

üéÅ –í –∫–æ–Ω—Ü–µ –≤–µ–±–∏–Ω–∞—Ä–∞ ‚Äî –ø–æ–¥–∞—Ä–æ–∫ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
{link}""")
        # Schedule reminders for this registration
        webinars_by_id = get_webinars_by_id()
        reg = {
            'telegram_id': chat_id,
            'webinar_id': user_data[chat_id]['date_id']
        }
        schedule_reminders_for_registration(reg, webinars_by_id)
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# TESTING: Command to manually schedule reminders for all registrations (for testing with new webinar dates)
@bot.message_handler(commands=['test_reminders'])
def test_reminders(message):
    schedule_all_reminders()
    bot.send_message(message.chat.id, "Test: All reminders have been (re)scheduled based on current data.")

# TESTING: Command to manually trigger Google Drive sync
@bot.message_handler(commands=['test_sync'])
def test_sync(message):
    bot.send_message(message.chat.id, "üîÑ Starting manual Google Drive sync...")
    sync_all_to_drive()
    bot.send_message(message.chat.id, "‚úÖ Manual sync completed!")

# TESTING: Command to manually trigger course registrations sync only
@bot.message_handler(commands=['test_course_sync'])
def test_course_sync(message):
    bot.send_message(message.chat.id, "üîÑ Starting manual course registrations sync...")
    sync_course_registrations_to_drive()
    bot.send_message(message.chat.id, "‚úÖ Course registrations sync completed!")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('type') == 'course':
        # This is a payment receipt for course registration
        process_payment_receipt(message)
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

if __name__ == "__main__":
    print("Bot is polling...")
    print(f"Google Drive sync scheduled every {SYNC_INTERVAL_MINUTES} minutes")
    bot.polling(none_stop=True) 